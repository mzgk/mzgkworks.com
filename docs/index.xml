<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mzgkworks.com</title>
    <link>http://mzgkworks.com/index.xml</link>
    <description>Recent content on mzgkworks.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Thu, 26 Jan 2017 18:00:25 +0900</lastBuildDate>
    <atom:link href="http://mzgkworks.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golangの環境をMacに構築する</title>
      <link>http://mzgkworks.com/post/golang-install-mac/</link>
      <pubDate>Thu, 26 Jan 2017 18:00:25 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/golang-install-mac/</guid>
      <description>

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Pro (15-inch, Mid 2012)&lt;/li&gt;
&lt;li&gt;macOS Sierra 10.12.3&lt;/li&gt;
&lt;li&gt;Homebrew 1.1.8&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goインストール&#34;&gt;Goインストール&lt;/h2&gt;

&lt;p&gt;Homebrewを利用してインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Homebrewのメンテ
$ brew update
$ brew upgrade
$ brew doctor
Your system is ready to brew.


# Golangのインストール
$ brew install go
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/go-1.7.4_2.sierra.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring go-1.7.4_2.sierra.bottle.tar.gz
==&amp;gt; Caveats
As of go 1.2, a valid GOPATH is required to use the `go get` command:
  https://golang.org/doc/code.html#GOPATH

You may wish to add the GOROOT-based install location to your PATH:
  export PATH=$PATH:/usr/local/opt/go/libexec/bin
==&amp;gt; Summary
🍺  /usr/local/Cellar/go/1.7.4_2: 6,438 files, 250.7M
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストールの確認&#34;&gt;インストールの確認&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ go version
go version go1.7.4 darwin/amd64

$ go env GOROOT
/usr/local/Cellar/go/1.7.4_2/libexec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gopathの設定&#34;&gt;GOPATHの設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go言語で開発するためのワークスペース&lt;/li&gt;
&lt;li&gt;Goが外部のライブラリが格納されている場所を知るために必要&lt;/li&gt;
&lt;li&gt;今回は「$HOME/Development/Go」&lt;/li&gt;
&lt;li&gt;設定は必須&lt;/li&gt;
&lt;li&gt;~/.bash_profileに設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# ~/.bash_profileを開く
$ vim ~/.bash_profile


# 以下を追記する
export GOPATH=$HOME/Development/Go
export PATH=$PATH:$GOPATH/bin


# 保存後に反映
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOSでの画面遷移（Segue/Modalの方針・データ授受・ライフサイクル）の確認</title>
      <link>http://mzgkworks.com/post/iso-transition-segue-modal/</link>
      <pubDate>Tue, 22 Nov 2016 18:19:42 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/iso-transition-segue-modal/</guid>
      <description>

&lt;p&gt;Single ViewController間の画面遷移に関して、以下の再確認のためのサンプル。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;遷移方法（Segue・Modal）の使用方針&lt;/li&gt;
&lt;li&gt;VC間のデータを受け渡す方法&lt;/li&gt;
&lt;li&gt;ライフサイクルの確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Xcode 8.1&lt;/li&gt;
&lt;li&gt;Swift 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使用方針&#34;&gt;使用方針&lt;/h2&gt;

&lt;h3 id=&#34;segue&#34;&gt;Segue&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Viewが提供する機能が完全に切り替わる場合に使用&lt;/li&gt;
&lt;li&gt;遷移のアクションを発火させるUIから、遷移先のViewControllerへ直接Segueを接続しない

&lt;ul&gt;
&lt;li&gt;遷移の発火がStoryBoardに埋もれるため&lt;/li&gt;
&lt;li&gt;Triggered Segues : manualを使用してVC間を接続&lt;/li&gt;
&lt;li&gt;発火させるUIからは、コードでSegueを実行する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;戻る処理はunwind Segueを使用&lt;/li&gt;
&lt;li&gt;データの受け渡し

&lt;ul&gt;
&lt;li&gt;各VCのprepare(for:sender:)にて、インスタンスを生成して行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サンプル

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mzgk/ManualSegue&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;modal&#34;&gt;Modal&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;元のViewから一時的に別機能を提供する場合に使用&lt;/li&gt;
&lt;li&gt;Segueを使用しないで、コードで表示させる

&lt;ul&gt;
&lt;li&gt;機能の切り替えではないため&lt;/li&gt;
&lt;li&gt;storyboard?.instantiateViewController(withIdentifier:) as! ModalのVCクラス名&lt;/li&gt;
&lt;li&gt;self.present(_:animated:completion:)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;閉じるのは表示元の責務とし、Modal側でDelegateプロトコルを定義する

&lt;ul&gt;
&lt;li&gt;表示元でDelegateプロトコルを実装し、Modalを閉じる&lt;/li&gt;
&lt;li&gt;self.dismiss(animated: true, completion: nil)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データの受け渡し

&lt;ul&gt;
&lt;li&gt;元 → Modal : self.present(_:animated:completion:)前に生成したModalのインスタンスに設定&lt;/li&gt;
&lt;li&gt;Modal → 元 : Modal側でDelegateプロトコルを定義し、その引数を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サンプル

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mzgk/ModalWithCode&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
SegueとModalの使い分け方針とデータの受け渡し方法をすっきりさせるためのアウトプット。&lt;br /&gt;
ライフサイクルに関しては、シュミュレーターで実行したからなのかLayoutSubView()系が複数回コールされているのが、ちょっと違和感を感じる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift3 ViewControllerのライフサイクル</title>
      <link>http://mzgkworks.com/post/swift3-viewcontroller-lifecycle/</link>
      <pubDate>Mon, 21 Nov 2016 17:42:49 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/swift3-viewcontroller-lifecycle/</guid>
      <description>

&lt;p&gt;ViewControllerのルートViewのライフサイクルを再確認。&lt;br /&gt;
各メソッドに以下のようなデバッグログを埋め込んで確認。&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;override func loadView() {
    super.loadView()
    print(&amp;quot;VC1 :&amp;quot;, #function)
    // #functionで関数名が表示される
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Xcode 8.1&lt;/li&gt;
&lt;li&gt;Swift 3&lt;/li&gt;
&lt;li&gt;シュミュレーターで確認（iPhone6s 10.1）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;起動-ホームボタン-アプリアイコン&#34;&gt;起動 → ホームボタン → アプリアイコン&lt;/h2&gt;

&lt;h3 id=&#34;起動&#34;&gt;起動&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;application(_:didFinishLaunchingWithOptions:)&lt;/li&gt;
&lt;li&gt;VC1 : loadView()&lt;/li&gt;
&lt;li&gt;VC1 : viewDidLoad()&lt;/li&gt;
&lt;li&gt;VC1 : viewWillAppear&lt;/li&gt;
&lt;li&gt;applicationDidBecomeActive&lt;/li&gt;
&lt;li&gt;VC1 : viewWillLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC1 : viewDidLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC1 : viewWillLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC1 : viewDidLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC1 : viewDidAppear&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ホームボタンをタップ&#34;&gt;ホームボタンをタップ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;applicationWillResignActive&lt;/li&gt;
&lt;li&gt;applicationDidEnterBackground&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;アプリアイコンをタップ&#34;&gt;アプリアイコンをタップ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;applicationWillEnterForeground&lt;/li&gt;
&lt;li&gt;applicationDidBecomeActive&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;vc1-ボタンタップ-vc2-モーダル表示&#34;&gt;VC1（ボタンタップ） → VC2（モーダル表示）&lt;/h2&gt;

&lt;h3 id=&#34;画面遷移&#34;&gt;画面遷移&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;VC1 : prepare(for:sender:)&lt;/li&gt;
&lt;li&gt;VC2 : loadView()&lt;/li&gt;
&lt;li&gt;VC2 : viewDidLoad()&lt;/li&gt;
&lt;li&gt;VC1 : viewWillDisappear&lt;/li&gt;
&lt;li&gt;VC2 : viewWillAppear&lt;/li&gt;
&lt;li&gt;VC2 : viewWillLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC2 : viewDidLayoutSubviews()&lt;/li&gt;
&lt;li&gt;VC1 : viewWillLayoutSubviews()  ← 謎&lt;/li&gt;
&lt;li&gt;VC1 : viewDidLayoutSubviews()   ← 謎&lt;/li&gt;
&lt;li&gt;VC2 : viewWillLayoutSubviews()  ← 謎&lt;/li&gt;
&lt;li&gt;VC2 : viewDidLayoutSubviews()   ← 謎&lt;/li&gt;
&lt;li&gt;VC2 : viewDidAppear&lt;/li&gt;
&lt;li&gt;VC1 : viewDidDisappear&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>才能について　吉本隆明</title>
      <link>http://mzgkworks.com/post/201611092223_words-yoshimoto-takaaki/</link>
      <pubDate>Wed, 09 Nov 2016 22:23:56 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/201611092223_words-yoshimoto-takaaki/</guid>
      <description>&lt;p&gt;吉本隆明が『&lt;a href=&#34;https://www.amazon.co.jp/gp/product/4062165651/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4062165651&amp;amp;linkCode=as2&amp;amp;tag=mzjubilee0526-22&#34;&gt;15歳の寺小屋　ひとり&lt;/a&gt;』の中で、才能について語った言葉。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;才能があるとかないとか、そんなものは認めない。&lt;br&gt;
そんなのは嘘だ。&lt;br&gt;
本当なのは、そのために手の動きをどれだけやったかということです。&lt;br&gt;
才能なんてものは問題にならない。問題になるのはせいぜい最初の二、三年くらいのもので、十年経ったらそんなことは全然問題じゃなくなるぜ。
&lt;br&gt;&lt;br&gt;
〜二時間目　才能って何だろうね〜&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Git コミットをミスった時の操作</title>
      <link>http://mzgkworks.com/post/git-change-commit/</link>
      <pubDate>Thu, 27 Oct 2016 19:14:50 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/git-change-commit/</guid>
      <description>

&lt;p&gt;コミットをミスった時の対処方法。&lt;br /&gt;
&lt;strong&gt;コミットのハッシュ値が変わるので、push前のコミットに対して行うこと。&lt;/strong&gt;&lt;br /&gt;
独り開発の場合は、$ git push -f &amp;lt;リモート&amp;gt; &amp;lt;ブランチ&amp;gt; で強制pushもできるが&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Git 2.10.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ハッシュ値&#34;&gt;ハッシュ値&lt;/h2&gt;

&lt;p&gt;ハッシュ値の指定部分は以下でも置き換えが可能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現在のコミット : HEAD&lt;/li&gt;
&lt;li&gt;１つ前のコミット : HEAD~, HEAD^&lt;/li&gt;
&lt;li&gt;２つ前のコミット : HEAD~2, HEAD^^&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;メッセージを直したい&#34;&gt;メッセージを直したい&lt;/h2&gt;

&lt;h3 id=&#34;直前のコミットの場合&#34;&gt;直前のコミットの場合&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git commit --amend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コミットメッセージ入力画面で編集・保存・終了&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;いくつか前のコミットの場合&#34;&gt;いくつか前のコミットの場合&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git log --oneline&lt;/code&gt; : 対象コミットの特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase -i &amp;lt;対象コミットの**１つ前**のハッシュ値&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;変更するコミットのコマンドを「pick → r」に編集・保存・終了&lt;/li&gt;
&lt;li&gt;コミットメッセージの編集・保存・終了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase --continue&lt;/code&gt; : 対象が複数ある場合&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;コミットに漏れの追加や内容修正をしたい&#34;&gt;コミットに漏れの追加や内容修正をしたい&lt;/h2&gt;

&lt;h3 id=&#34;直前のコミットの場合-1&#34;&gt;直前のコミットの場合&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git add A.txt&lt;/code&gt; : 変更や漏れをステージング&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit --amend --no-edit&lt;/code&gt; : メッセージ変更しない場合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit --amend&lt;/code&gt; : メッセージも変更する場合&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;いくつか前のコミットの場合-1&#34;&gt;いくつか前のコミットの場合&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git log --oneline&lt;/code&gt; : 対象コミットの特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase -i &amp;lt;対象コミットの**１つ前**のハッシュ値&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;変更するコミットのコマンドを「pick → e」に編集・保存・終了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add A.txt&lt;/code&gt; : 変更や漏れをステージング&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit --amend (--no-edit)&lt;/code&gt; : コミット&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase --continue&lt;/code&gt; : 対象が複数ある場合&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;今のコミットを取り消したい&#34;&gt;今のコミットを取り消したい&lt;/h2&gt;

&lt;h3 id=&#34;soft-リポジトリだけ変更&#34;&gt;&amp;ndash;soft : リポジトリだけ変更&lt;/h3&gt;

&lt;p&gt;コミットは取り消したいけど、インデックス・ワーキングエリアはそのままにしたい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --soft HEAD~&lt;/code&gt; : HEADの１つ前の状態に巻き戻す&lt;/p&gt;

&lt;h3 id=&#34;mixed-リポジトリ-インデックスを変更&#34;&gt;&amp;ndash;mixed : リポジトリ・インデックスを変更&lt;/h3&gt;

&lt;p&gt;コミットは取り消したいけど、ワーキングエリアだけはそのままにしたい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --mixed HEAD~&lt;/code&gt; : HEADの１つ前の状態に巻き戻す&lt;/p&gt;

&lt;h3 id=&#34;hard-まったくなかったことにしたい&#34;&gt;&amp;ndash;hard : まったくなかったことにしたい&lt;/h3&gt;

&lt;p&gt;コミットも取り消して、ワーキングエリアの状態も戻したい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --hard 40eeb32&lt;/code&gt; : HEADの１つ前のハッシュ値でも可&lt;/p&gt;

&lt;h2 id=&#34;直近のいくつかのコミットを取り消したい-途中のいくつかだけはrebaseで&#34;&gt;直近のいくつかのコミットを取り消したい（途中のいくつかだけはrebaseで）&lt;/h2&gt;

&lt;h3 id=&#34;soft-リポジトリだけ変更-1&#34;&gt;&amp;ndash;soft : リポジトリだけ変更&lt;/h3&gt;

&lt;p&gt;コミットは取り消したいけど、インデックス・ワーキングエリアはそのままにしたい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --soft HEAD~3&lt;/code&gt; : HEADの3つ前の状態に巻き戻す&lt;/p&gt;

&lt;h3 id=&#34;mixed-リポジトリ-インデックスを変更-1&#34;&gt;&amp;ndash;mixed : リポジトリ・インデックスを変更&lt;/h3&gt;

&lt;p&gt;コミットは取り消したいけど、ワーキングエリアだけはそのままにしたい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --mixed HEAD~3&lt;/code&gt; : HEADの3つ前の状態に巻き戻す&lt;/p&gt;

&lt;h3 id=&#34;hard-全エリアを変更&#34;&gt;&amp;ndash;hard : 全エリアを変更&lt;/h3&gt;

&lt;p&gt;コミットも取り消して、ワーキングエリアの状態も戻したい。&lt;br /&gt;
1. &lt;code&gt;$ git reset --hard 40eeb32&lt;/code&gt; : その状態にしたいコミットのハッシュ値でも可&lt;/p&gt;

&lt;h2 id=&#34;あのコミットをなくしたい&#34;&gt;あのコミットをなくしたい&lt;/h2&gt;

&lt;p&gt;途中のあのコミットだけを削除したい場合。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git log --oneline&lt;/code&gt; : 対象コミットの特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase -i &amp;lt;対象コミットの**１つ前**のハッシュ値&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;対象のコミットの行のコマンドを「pick → d」に変更して、保存・終了&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$ git log --decorate --oneline
1588243 (HEAD -&amp;gt; master) 3 bye
2620a4a 2 morning ← このコミットを削除したい
40eeb32 1st hello

// rebase
$ git rebase -i HEAD~2（or 40eeb32）
... エディタが起動
pick 2620a4a 2 morning
pick 1588243 3 bye

... 対象コミットのpickをdに編集して、保存・終了
d 2620a4a 2 morning ← 削除 : d
pick 1588243 3 bye

// コンフリクトが発生した場合は、解消して
$ git add .
$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コミットをまとめたい&#34;&gt;コミットをまとめたい&lt;/h2&gt;

&lt;p&gt;いくつかのコミットをまとめて、１つのコミットにしたい場合。&lt;br /&gt;
&lt;strong&gt;１つ前&lt;/strong&gt; のコミットと統合される。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git log --oneline&lt;/code&gt; : 対象コミットの特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase -i &amp;lt;対象コミットの**１つ前**のハッシュ値&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;（メッセージ変更あり）まとめたいコミット行のコマンドを「s」に変更して、保存・終了&lt;/li&gt;
&lt;li&gt;（メッセージ変更なし）まとめたいコミット行のコマンドを「f」に変更して、保存・終了&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-@git&#34;&gt;$ git log --oneline
a990297 4 commit
72698fd 3 commit ← これと
38517d7 2 commit ← これを統合したい
1736724 1 commit

// rebase開始
$ git rebase -i HEAD~3
pick 38517d7 2 commit
pick 72698fd 3 commit　← これを２に統合（１つ前に統合されるので）
pick a990297 4 commit

// 編集して、保存・終了
pick 38517d7 2 commit
s 72698fd 3 commit → s:メッセージ編集あり／f:なし（１つ前のメッセージが適用）
pick a990297 4 commit

// メッセージ編集が表示される
# This is a combination of 2 commits.
# This is the 1st commit message:

2 commit

# This is the commit message #2:

3 commit

// 編集して、保存・終了
2-3 commit

// 確認
$ git log --oneline
f91881d 4 commit
a7c420d 2-3 commit
1736724 1 commit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コミットの順番を変更したい&#34;&gt;コミットの順番を変更したい&lt;/h2&gt;

&lt;p&gt;コミットの順番を入れ替えたい場合。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git log --oneline&lt;/code&gt; : 対象コミットの特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git rebase -i &amp;lt;対象コミットの**１つ前**のハッシュ値&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コミットの行を入れ替えて、保存・終了&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-@git&#34;&gt;$ git log --oneline
f02a616 4 commit
9b399bc 3 commit file add ← これと
12f55d3 2 commit          ← これの順番を入れ替えたい
8a337e8 1 commit

// rebase開始
$ git rebase -i HEAD~3
pick 12f55d3 2 commit
pick 9b399bc 3 commit file add ← この行を2 commitの上に移動する
pick f02a616 4 commit

// 編集し、保存・終了
pick 9b399bc 3 commit file add
pick 12f55d3 2 commit
pick f02a616 4 commit

// 結果
$ git log --oneline
d7f14ec 4 commit
00d216a 2 commit
a22ab93 3 commit file add
8a337e8 1 commit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Swiftの引数についてのメモ</title>
      <link>http://mzgkworks.com/post/swift-argument/</link>
      <pubDate>Wed, 26 Oct 2016 16:27:37 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/swift-argument/</guid>
      <description>

&lt;p&gt;Swiftの引数について、1.x時代から変わったりうろ覚えだった部分もあったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Swift 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ラベル&#34;&gt;ラベル&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;argument label : 関数呼び出し用（呼び出し時に使用）

&lt;ul&gt;
&lt;li&gt;「_」をつけることで省略可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;parameter label : 関数定義用（関数内部で使用）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;argument-label-あり&#34;&gt;argument label : あり&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// argument label : first, second
// parameter label : a, b
func addTwo(first a: Int, second b: Int)-&amp;gt; Int {
    return a + b
}

// 呼び出し
var value = addTwo(first: 1, second: 2)
// 結果 : 3
print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;argument-label-なし&#34;&gt;argument label : なし&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// parameter label : a, b
func addTwo(_ a: Int, _ b: Int)-&amp;gt; Int {
    return a + b
}

// 呼び出し
var value = addTwo(1, 2)
// 結果 : 3
print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デフォルト引数&#34;&gt;デフォルト引数&lt;/h2&gt;

&lt;p&gt;あたかじめ引数に値を設定しておくことで、呼び出し時に引数の省略が可能となる。&lt;br /&gt;
省略された場合、定義されているデフォルト値が適用される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// aとbの文字列連結。セパレーターのcにデフォルト値（, ）を定義
func connectTwo(first a: String, second b: String, separator c: String = &amp;quot;, &amp;quot;)-&amp;gt; String {
    return a + c + b
}


// デフォルト引数を使う
var val = connectTwo(first: &amp;quot;A&amp;quot;, second: &amp;quot;B&amp;quot;)
// 結果 : A, B
print(val)


// デフォルト値を使わない
val = connectTwo(first: &amp;quot;A&amp;quot;, second: &amp;quot;B&amp;quot;, separator: &amp;quot;/ &amp;quot;)
// 結果 : A/ B
print(val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;可変引数&#34;&gt;可変引数&lt;/h2&gt;

&lt;p&gt;あらかじめ引数の数がわからない場合などに使用する。&lt;br /&gt;
定義時は、型の後ろに「&amp;hellip;」をつける。&lt;br /&gt;
呼び出し時は、複数の値を「,（カンマ）」で区切って設定する。&lt;br /&gt;
可変引数の定義は、１関数につき１つまで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// 最初の引数が可変
// 引数の値をセパレーターで区切って連結する関数
func write(inWord a: String..., separator c: String = &amp;quot;, &amp;quot;)-&amp;gt; String {
    var output = &amp;quot;&amp;quot;
    for index in 0..&amp;lt;a.count {
        output += a[index] + c
    }
    return output
}

// １つの場合
var val = write(inWord: &amp;quot;ABC&amp;quot;)
// 結果 : ABC,
print(val)


// ３つの場合
val = write(inWord: &amp;quot;ABC&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;GHI&amp;quot;)
// 結果 : ABC, DEF, GHI,
print(val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;引数の値の変更&#34;&gt;引数の値の変更&lt;/h2&gt;

&lt;p&gt;引数の値は定数となるので、関数内での変更は不可。&lt;br /&gt;
ただし、インスタンスの場合は参照値が格納されているので、インスタンスの参照値は変更不可だが、中のプロパティ値の変更は可能。&lt;br /&gt;
※プロパティがvarで宣言されている場合のみ&lt;/p&gt;

&lt;h3 id=&#34;通常&#34;&gt;通常&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// 引数aの値は変更できない
func change(_ a: String)-&amp;gt; String {
  a = &amp;quot;XYZ&amp;quot;   // ← Cannot assign to value &#39;a&#39; is a &#39;let&#39; constant
}

change(&amp;quot;ABC&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インスタンスの場合&#34;&gt;インスタンスの場合&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;class Person {
    let name: String
    var age: Int    // ※ここがletの場合は、変更できない

    init(inName name:String, inAge age: Int) {
        self.name = name
        self.age = age
    }
}

// 引数で渡されたPerson型の引数のageプロパティを変更する関数
func update(inPerson person: Person) {
    person.age = 20
}

// Tomを10才で生成（Tom : 10）
var tom = Person(inName: &amp;quot;Tom&amp;quot;, inAge: 10)
print(&amp;quot;\(tom.name) : \(tom.age)&amp;quot;)


// 更新する関数に渡す
update(inPerson: tom)
// 結果 : Tom : 20
print(&amp;quot;\(tom.name) : \(tom.age)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inoutparameter&#34;&gt;InOutParameter&lt;/h2&gt;

&lt;p&gt;定義時に型の前に「inout」をつけることで、引数の値を関数内で変更し呼び出し元に連携することができる。&lt;br /&gt;
呼び出し時は、引数の前に「&amp;amp;」をつける。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@Swift&#34;&gt;// 引数の値を入れ替える
func swap(first a: inout String, second b: inout String) {
    let tmp = a
    a = b
    b = tmp
}

var wordA = &amp;quot;ABC&amp;quot;
var wordZ = &amp;quot;XYZ&amp;quot;

// 入れ替え前 : wordA = ABC, wordZ = XYZ
print(&amp;quot;wordA = \(wordA), wordZ = \(wordZ)&amp;quot;)

// 入れ替え（引数に&amp;amp;がつく）
swap(first: &amp;amp;wordA, second: &amp;amp;wordZ)
// 入れ替え後 : wordA = XYZ, wordZ = ABC
print(&amp;quot;wordA = \(wordA), wordZ = \(wordZ)&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>products</title>
      <link>http://mzgkworks.com/products/products/</link>
      <pubDate>Wed, 19 Oct 2016 19:14:47 +0900</pubDate>
      
      <guid>http://mzgkworks.com/products/products/</guid>
      <description></description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://mzgkworks.com/about/about/</link>
      <pubDate>Wed, 19 Oct 2016 19:12:09 +0900</pubDate>
      
      <guid>http://mzgkworks.com/about/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MacにSass環境を構築する（Ruby gem）</title>
      <link>http://mzgkworks.com/post/ruby-gem-install-sass/</link>
      <pubDate>Tue, 04 Oct 2016 18:57:07 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/ruby-gem-install-sass/</guid>
      <description>

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OS X 10.11.6 El Capitan&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;望むこと&#34;&gt;望むこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;scssで書いて、動的にcssにコンパイル&lt;/li&gt;
&lt;li&gt;環境周りのコストを少なく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;選択肢は&#34;&gt;選択肢は&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;gulp : 使うほどタスクないし、プラグインや設定ファイルなどの初期学習コストが高い&lt;/li&gt;
&lt;li&gt;npm run : package.jsonが面倒&lt;/li&gt;
&lt;li&gt;Macなのでrubyがインストール済み

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sudo gem install sass&lt;/code&gt; → sassコマンドか！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;環境構築&#34;&gt;環境構築&lt;/h2&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;存在確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ ruby -v
ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gemのアップデート&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ sudo gem update --system
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sass&#34;&gt;sass&lt;/h3&gt;

&lt;p&gt;存在確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ sass -v
-bash: sass: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ sudo gem install sass
...
1 gem installed

$ sass -v
Sass 3.4.22 (Selective Steve)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイル&#34;&gt;コンパイル&lt;/h2&gt;

&lt;h3 id=&#34;フォルダ構成&#34;&gt;フォルダ構成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.
|-- css   → ここにコンパイルされたmain.cssが生成される
`-- scss
    |-- base
    |   |-- _reset.scss   → _sanitize.scssを@import
    |   `-- lib
    |       `-- _sanitize.scss
    |-- components
    |   `-- _component.scss   → いろいろと記述
    `-- main.scss   → reset,componentのimportのみ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンパイル-1&#34;&gt;コンパイル&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# scssディレクトリ以下のファイル更新を監視し、cssディレクトリへ出力
$ sass --watch --style expanded scss:css
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;オプション&#34;&gt;オプション&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;watch : ファイルの更新を監視し、更新されたらコンパイル&lt;/li&gt;
&lt;li&gt;style : 生成されるcssの形式

&lt;ul&gt;
&lt;li&gt;nested : sassの階層をインデントで残す（デフォルト）&lt;/li&gt;
&lt;li&gt;expanded : 普通のcss形式&lt;/li&gt;
&lt;li&gt;compact : セレクタとプロパティが1行形式&lt;/li&gt;
&lt;li&gt;compressed : 圧縮形式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※styleを途中で変更する場合は、一度生成された.cssを削除すること&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS1〜CSS3までのセレクタのまとめ</title>
      <link>http://mzgkworks.com/post/css-selector-list/</link>
      <pubDate>Wed, 21 Sep 2016 18:28:09 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/css-selector-list/</guid>
      <description>

&lt;h2 id=&#34;全称-タイプ-id-クラスセレクタ&#34;&gt;全称・タイプ・ID・クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全称&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;すべての要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;タイプ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 E, F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EとFの要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;#id_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ID&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;id_nameというIDを持つすべての要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 E#id_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;id_nameというIDを持つE要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.class_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;クラス&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;class_nameというクラスを持つすべての要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 E.class_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;class_nameというクラスを持つE要素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;属性セレクタ&#34;&gt;属性セレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;属性&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性を持つE要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性がbarの値だけを持つE要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo~=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性がbarの値を持つE要素  ※class=&amp;ldquo;bar baz&amp;rdquo;など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo^=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性の値がbarで始まっているE要素  ※class=&amp;ldquo;barbal&amp;rdquo;など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo$=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性の値がbarで終わっているE要素  ※class=&amp;ldquo;balbar&amp;rdquo;など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo*=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性の値にbarが含まれるE要素  ※class=&amp;ldquo;fobarbaz&amp;rdquo;など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E[foo&amp;#124;=&amp;ldquo;bar&amp;rdquo;]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;foo属性の値が、bar または bar-bazのE要素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;結合子セレクタ&#34;&gt;結合子セレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;子孫&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の子孫であるF要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E *&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の子孫すべて&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E .class_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の子孫でclass_nameというクラスを持つ要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.class_name E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.class_nameを持つ要素の子孫であるE要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E &amp;gt; F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;子&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の子となるF要素  ※途中他要素の子になっているのは対象外&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隣接&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素に隣接（直後）しているF要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E ~ F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;間接&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の後ろにある同じ階層のF要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 div ~ p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;divと同階層でdivより後ろにあるpが適用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 h2 ~ h2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;同階層で２番目のh2から適用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;構造擬似クラスセレクタ&#34;&gt;構造擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:first-child&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;構造擬似&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最初のE要素（= nth-child(1)） ※最初のEより前の他要素もカウント&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:last-child&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最後のE要素（= nth-last-child(1)） ※最後のEより後ろの他要素もカウント&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:nth-child(n)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;n番目のE要素  ※途中の他要素もカウント&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:nth-last-child(n)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最後からn番目のE要素  ※途中の他要素もカウント&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:nth-of-type(n)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最初からn番目に表れるE要素  ※途中の他要素はカウントしない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:nth-last-of-type(n)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最後からn番目に表れるE要素  ※途中の他要素はカウントしない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 (n) → 2n+1 or odd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;奇数番目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 (n) → 2n or even&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;偶数番目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 (n) → 3n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;３の倍数番目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 (n) → 3n+1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;１、４、７、１０&amp;hellip;番目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:first-of-type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最初のE要素  ※他の要素はカウントしない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:last-of-type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最後のE要素  ※他の要素はカウントしない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E F:only-child&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素内にF要素１つのみ存在の場合  ※他要素・F複数はダメ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E F:only-of-type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素内にF要素が１つのみ存在の場合  ※他要素がいても可&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:empty&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素内がカラの場合&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;:root&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文書のルート要素（htmlに適用するのと同じ）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;否定擬似クラスセレクタ&#34;&gt;否定擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:not(s)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否定擬似&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;sで指定するセレクタに該当しないE要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 body *:not(h1)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;h1以外すべての要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 p:not(.class_name)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;class_nameがついているp以外のすべてのp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;リンク擬似クラスセレクタ&#34;&gt;リンク擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:link&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;リンク擬似&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;未訪問のリンク&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:visited&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;訪問済みのリンク&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;ユーザーアクション擬似クラスセレクタ&#34;&gt;ユーザーアクション擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:active&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ユーザーアクション&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;クリック中の要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:hover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;カーソルが乗っている要素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:focus&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;フォーカスされた要素（入力欄で入力可能状態）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;:target&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;href=&amp;ldquo;#foo&amp;rdquo;のリンクを踏んだ際の、id=&amp;ldquo;foo&amp;rdquo;の要素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;ui状態擬似クラスセレクタ&#34;&gt;UI状態擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:enabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;UI状態擬似&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素が有効状態（textareaなど）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素が無効状態（textareaなど）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:checked&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素がチェック状態（ラジオ・チェックボックス）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 チェックボックス&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;input[type=&amp;ldquo;checkbox&amp;rdquo;]:checked {}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;言語情報擬似クラスセレクタ&#34;&gt;言語情報擬似クラスセレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E:lang(s)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;言語情報&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;lang=&amp;ldquo;s&amp;rdquo;を持つE要素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;擬似要素セレクタ&#34;&gt;擬似要素セレクタ&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;パターン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;適用範囲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E::first-letter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;擬似要素&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の最初の１文字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E::first-line&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の最初の１行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E::before&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の直前&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E::after&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;E要素の直後&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;例 前に☆&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;::before {contet: &amp;ldquo;☆&amp;rdquo;}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>CSSの適用優先度の考え方</title>
      <link>http://mzgkworks.com/post/css-applying-priority/</link>
      <pubDate>Tue, 20 Sep 2016 18:09:36 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/css-applying-priority/</guid>
      <description>

&lt;h2 id=&#34;cssが適用される優先度&#34;&gt;CSSが適用される優先度&lt;/h2&gt;

&lt;p&gt;詳細度の大きい順（点数例）に適用が優先される。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セレクタ例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ページ内での複数指定&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;詳細度&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;点数例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;idセレクタ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;#id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;１度のみ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;大&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;classセレクタ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;複数可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;要素セレクタ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;div, p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;複数可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;擬似セレクタ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;:first-child&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;複数可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;全称セレクタ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;１度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最小&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;組合せなしの場合&#34;&gt;組合せなしの場合&lt;/h2&gt;

&lt;p&gt;「idセレクタ ＞ classセレクタ ＞ 要素セレクタ ＞ 全称セレクタ」の順で適用される。&lt;br /&gt;
セレクタが同じ場合（詳細度が同じなので）、あとに書かれたものが優先される。&lt;/p&gt;

&lt;h2 id=&#34;組合せ等がある場合&#34;&gt;組合せ等がある場合&lt;/h2&gt;

&lt;p&gt;組合せたセレクタ名の詳細度の合計が高い順に、適用される。&lt;br /&gt;
　classセレクタ＋要素セレクタ ＞ classセレクタ&lt;br /&gt;
※ただし、同じレベルのセレクタを重ねていっても、上位のセレクタに勝つことはない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@html&#34;&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
  &amp;lt;p class=&amp;quot;text&amp;quot;&amp;gt;内側のテキスト&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p class=&amp;quot;text&amp;quot;&amp;gt;外側のテキスト&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-@css&#34;&gt;.text {
  color: red;
}
.box p {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の場合、&lt;p&gt;には同じclassが指定されているが&lt;br /&gt;
「 .box(10) + p(1) ＞ .text(10) 」となるので、&lt;br /&gt;
&lt;br&gt;
内側のテキスト : blue&lt;br /&gt;
外側のテキスト : red&lt;br /&gt;
&lt;br&gt;
となる。&lt;/p&gt;

&lt;h2 id=&#34;要素-親要素&#34;&gt;要素 ＞ 親要素&lt;/h2&gt;

&lt;p&gt;親要素から受け継ぐ指定より、要素そのものへの指定が優先して適用される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@html&#34;&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
  &amp;lt;p class=&amp;quot;text&amp;quot;&amp;gt;内側のテキスト&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p class=&amp;quot;text&amp;quot;&amp;gt;外側のテキスト&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-@css&#34;&gt;p {
  color: red;
}
.box {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の場合、詳細度的には「.box(10) ＞ p(1)」だが、「.box」は p の親要素 div のクラスセレクタであり、p には直接指定がある。&lt;br /&gt;
なので、直接の指定 ＞ 親要素の指定 となり、&lt;br /&gt;
&lt;br&gt;
内側のテキスト : red&lt;br /&gt;
外側のテキスト : red&lt;br /&gt;
&lt;br&gt;
となる。&lt;/p&gt;

&lt;h2 id=&#34;important&#34;&gt;!important&lt;/h2&gt;

&lt;p&gt;詳細度が一番大きくなり、インラインCSSを含めすべてを上書きすることができる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacからLinux（CentOS7）にSSH公開鍵認証で接続する</title>
      <link>http://mzgkworks.com/post/mac-linux-ssh-rsa-connection/</link>
      <pubDate>Fri, 16 Sep 2016 18:32:16 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/mac-linux-ssh-rsa-connection/</guid>
      <description>

&lt;p&gt;MacからSSHの公開鍵認証でLinux（CentOS7）に接続する方法。&lt;/p&gt;

&lt;h2 id=&#34;linux-公開鍵の設置場所作成&#34;&gt;Linux : 公開鍵の設置場所作成&lt;/h2&gt;

&lt;p&gt;Linux側で公開鍵ファイルを設置する場所を作成しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# ホームディレクトリ直下に.sshディレクトリを作成
$ mkdir ~/.ssh

# パーミッションを700に変更
$ chmod 700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mac-公開鍵と秘密鍵の作成&#34;&gt;Mac : 公開鍵と秘密鍵の作成&lt;/h2&gt;

&lt;p&gt;Mac側で &lt;code&gt;$ ssh-keygen&lt;/code&gt;コマンドを使って、公開鍵と秘密鍵ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# SSH2-rsa形式で作成
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/[ユーザー名]/.ssh/id_rsa):

# 作成したい場所とファイル名をフルパスで入力する
# 未入力の場合は、/Users/[ユーザー名]/.ssh/に以下が生成される
# id_rsa : 秘密鍵
# id_rsa.pub : 公開鍵

# 任意のパスフレーズを入力する
Enter passphrase (empty for no passphrase):
Enter same passphrase again:

# 作成が完了したか確認
$ ls -la ~/.ssh
-rw-------   1 xxxx  staff  1766  9 16 17:06 id_rsa
-rw-r--r--   1 xxxx  staff   402  9 16 17:06 id_rsa.pub

# 公開鍵ファイルのパーミッションを変更（所有者のみrw）
$ chmod 600 ~/.ssh/id_rsa.pub

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mac-ssh接続の設定&#34;&gt;Mac : SSH接続の設定&lt;/h2&gt;

&lt;p&gt;SSH設定ファイル（~/.ssh/Config）に接続情報を追加する。&lt;br /&gt;
ssh接続時にHOSTに設定した引数で接続ができるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;HOST 任意の名前（sshコマンドの引数として入力する）
  HostName 接続先LinuxのIP
  User Linuxログインユーザー名
  Port Linux側SSHポート番号
  IdentityFile Mac内の秘密鍵ファイルのフルパス
  ServerAliveInterval 60 # 60秒ごとに接続先にmsg送信
  # これは接続が切れないようにするため
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;公開鍵ファイルの転送&#34;&gt;公開鍵ファイルの転送&lt;/h2&gt;

&lt;p&gt;Macから接続先のLinuxに&lt;code&gt;$ scp&lt;/code&gt;コマンドを使って、公開鍵ファイルを転送する。&lt;br /&gt;
その際に、公開鍵ファイルの名前を「authorized_keys」に変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ scp -P [SSHポート番号] [公開鍵フルパス] [ユーザー名]@[LinuxのIP]:~/.ssh/authorized_keys
xxx@xxx&#39;s password: # Linuxのユーザーパスワード
id_rsa.pub                                                                    100%  402     0.4KB/s   00:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;接続&#34;&gt;接続&lt;/h2&gt;

&lt;p&gt;Mac側から接続。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ ssh [HOSTに定義した名前]

# 秘密鍵を作成した際のパスフレーズ入力のダイアログが表示される
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;linux-sshパスワード認証を禁止する&#34;&gt;Linux : SSHパスワード認証を禁止する&lt;/h2&gt;

&lt;p&gt;SSHサーバーの設定を変更し、パスワード認証を無効にする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ sudo vi /etc/ssh/sshd_config

PassswordAuthentication yes → noに変更

# SSHサービスの設定を再読み込みする
$ sudo systemctl reload sshd.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linuxでのログインユーザの確認や制御の方法</title>
      <link>http://mzgkworks.com/post/linux-login-user-management/</link>
      <pubDate>Fri, 16 Sep 2016 16:21:06 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/linux-login-user-management/</guid>
      <description>

&lt;p&gt;Linuxにはrootユーザーが必ず存在するため、外部からのログインは一般ユーザーのみに限定し、rootユーザーを禁止する。&lt;/p&gt;

&lt;h2 id=&#34;sshでのrootログインの禁止&#34;&gt;SSHでのrootログインの禁止&lt;/h2&gt;

&lt;p&gt;/etc/ssh/sshd_configファイルを以下に変更。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ログイン可能なユーザーを限定&#34;&gt;ログイン可能なユーザーを限定&lt;/h2&gt;

&lt;p&gt;/etc/ssh/sshd_configファイルに以下を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# AllowUsers [ユーザー名]
AllowUsers centuser
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おまけ-sshポートの変更&#34;&gt;（おまけ）SSHポートの変更&lt;/h2&gt;

&lt;p&gt;/etc/ssh/sshd_configファイルを以下に変更。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# Port [ポート番号]
Port 10022
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;変更後はsshサーバーの再起動&#34;&gt;変更後はSSHサーバーの再起動&lt;/h2&gt;

&lt;p&gt;設定ファイルの変更後は、SSKサーバーを再起動させる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ sudo systemctl restart sshd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;過去のログイン情報を確認する&#34;&gt;過去のログイン情報を確認する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ last&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ last
centuser pts/0        219.118.174.90   Fri Sep 16 15:59   still logged in
centuser pts/0        219.118.174.90   Fri Sep 16 15:54 - 15:54  (00:00)
centuser pts/1        219.118.174.90   Thu Sep 15 19:20 - 19:35  (00:15)
centuser pts/0        219.118.174.90   Thu Sep 15 16:06 - 21:01  (04:54)
centuser pts/1        219.118.174.90   Tue Sep 13 17:34 - 19:50  (02:16)
centuser pts/0        219.118.174.90   Tue Sep 13 16:57 - 19:08  (02:11)
reboot   system boot  3.10.0-327.28.3. Tue Sep 13 16:56 - 16:16 (2+23:19)
centuser pts/0        219.118.174.90   Tue Sep 13 16:48 - 16:56  (00:07)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ユーザーごとの最終ログインを確認する&#34;&gt;ユーザーごとの最終ログインを確認する&lt;/h2&gt;

&lt;p&gt;ユーザーごとの最終ログインを表示することによって、覚えのないユーザーのログインを発見できる。&lt;br /&gt;
&lt;code&gt;$ lastlog&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ lastlog
ユーザ名         ポート   場所             最近のログイン
root             pts/0                     金  9月 16 15:54:17 +0900 2016
bin                                        **一度もログインしていません**
...
centuser         pts/0    219.118.174.90   金  9月 16 15:59:23 +0900 2016
apache                                     **一度もログインしていません**
mysql                                      **一度もログインしていません**
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linuxで開いているポートを確認する方法</title>
      <link>http://mzgkworks.com/post/linux-port-confirm/</link>
      <pubDate>Thu, 15 Sep 2016 19:08:29 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/linux-port-confirm/</guid>
      <description>

&lt;p&gt;開いているポートの確認方法。&lt;br /&gt;
&lt;br&gt;
ポートはサービス（ソフトウェア）が使用し、そのポートを通る通信をFireWallが監視（制御）している。&lt;br /&gt;
なので、サービスの登録（ソフトのインストール）をするとポートが使用され、FireWallでそのポートを開放してやると、外部との通信が可能になる。&lt;/p&gt;

&lt;h2 id=&#34;netstat-ss&#34;&gt;netstat（ss）&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ netstat&lt;/code&gt;　または &lt;code&gt;$ ss&lt;/code&gt;コマンドで、現在開いているポートを一覧表示することができる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;オプション&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-l&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Listenしているポートのみ表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TCPを表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-u&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;UDPを表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ポートやホストを数値で表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ポートを開いているプロセスを表示（sudo）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;IPv4のみ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;IPv6のみ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# 開いているポートと使用しているプロセス（IPv4）
$ sudo netstat -ltup4
sudo netstat -ltup4
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:mysql           0.0.0.0:*               LISTEN      2015/mysqld
tcp        0      0 localhost:smtp          0.0.0.0:*               LISTEN      2282/master
tcp        0      0 0.0.0.0:10022           0.0.0.0:*               LISTEN      1274/sshd
udp        0      0 localhost:323           0.0.0.0:*                           658/chronyd

# 上記を数値で
sudo netstat -ltunp4
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2015/mysqld
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2282/master
tcp        0      0 0.0.0.0:10022           0.0.0.0:*               LISTEN      1274/sshd
udp        0      0 127.0.0.1:323           0.0.0.0:*                           658/chronyd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;例えば&#34;&gt;例えば&lt;/h2&gt;

&lt;p&gt;例えばhttps通信を許可してやるには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mod_sslをインストール

&lt;ul&gt;
&lt;li&gt;$ sudo yum install mod_ssl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SSLの設定

&lt;ul&gt;
&lt;li&gt;/etc/httpd/conf.d/sl.conf&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Apaceを再起動する

&lt;ul&gt;
&lt;li&gt;$ sudo systemctl restart httpd&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ポート状態を確認する

&lt;ul&gt;
&lt;li&gt;$ sudo netstat -ltupn&lt;/li&gt;
&lt;li&gt;443がLISTEN状態になっているか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FireWallにサービスの許可を追加

&lt;ul&gt;
&lt;li&gt;$ sudo firewall-cmd &amp;ndash;add-service=https&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連&#34;&gt;関連&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://mzgkworks.com/post/network-protocol-ipadress/&#34;&gt;ネットワークの基礎知識（プロトコル・IPアドレス・サブネットマスク・ポート）&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS7のsystemctlコマンドの使い方</title>
      <link>http://mzgkworks.com/post/centos7-systemctl-service/</link>
      <pubDate>Thu, 15 Sep 2016 18:57:14 +0900</pubDate>
      
      <guid>http://mzgkworks.com/post/centos7-systemctl-service/</guid>
      <description>

&lt;p&gt;CentOS 7のsystemdサービス管理のメモ。&lt;br /&gt;
サービスの稼働状態や自動起動設定の確認・操作。　　&lt;/p&gt;

&lt;h2 id=&#34;unitの状態&#34;&gt;UNITの状態&lt;/h2&gt;

&lt;h3 id=&#34;確認-一覧&#34;&gt;確認 : 一覧&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ systemctl list-unit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ACTIVE, SUBが実行状態を表している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# UNITのタイプがServiceのみを確認
$ systemctl list-units -t service
UNIT                 LOAD   ACTIVE SUB     DESCRIPTION
auditd.service       loaded active running Security Auditing Service
chronyd.service      loaded active running NTP client/server
...
● kdump.service      loaded failed failed  Crash recovery kernel arming
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;確認-個別&#34;&gt;確認 : 個別&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ systemctl is-active [UNIT名]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ systemctl is-active yum-cron
active
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;確認-個別詳細&#34;&gt;確認 : 個別詳細&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ systemctl status [UNIT名]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;$ systemctl status yum-cron
● yum-cron.service - Run automatic yum updates as a cron job
   Loaded: loaded (/usr/lib/systemd/system/yum-cron.service; enabled; vendor preset: disabled)
   Active: active (exited) since 火 2016-09-13 16:56:49 JST; 2 days ago
  Process: 644 ExecStart=/bin/touch /var/lock/subsys/yum-cron (code=exited, status=0/SUCCESS)
 Main PID: 644 (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/yum-cron.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;操作-起動-停止-再起動-強制終了&#34;&gt;操作（起動・停止・再起動・強制終了）&lt;/h3&gt;

&lt;p&gt;UNITの操作。&lt;br /&gt;
&lt;code&gt;$ sudo systemctl [UNITコマンド] [UNIT名]&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;UNITコマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;start&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;起動させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;stop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;停止させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;restart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;再起動させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;kill&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;強制終了させる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;自動起動設定&#34;&gt;自動起動設定&lt;/h2&gt;

&lt;h3 id=&#34;確認-一覧-1&#34;&gt;確認 : 一覧&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ systemctl list-unit-files&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;STATE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;enabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動 : 有効&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動 : 無効&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;static&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動 : 設定不可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# UNITのタイプがServiceのみを確認
$ systemctl list-unit-files -t service
UNIT FILE                                   STATE
arp-ethers.service                          disabled
auditd.service                              enabled
chrony-dnssrv@.service                      static
dbus-org.freedesktop.hostname1.service      static
...

# grepへパイプで繋いで「enabled」のみを表示させる
$ systemctl list-unit-files -t service | grep enabled
UNIT FILE                                   STATE
auditd.service                              enabled
chronyd.service                             enabled
...
tuned.service                               enabled
yum-cron.service                            enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;確認-個別-1&#34;&gt;確認 : 個別&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ sudo systemctl is-enabled [Unit名]&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;状態&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;enabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動が有効&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動が無効&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-@bash&#34;&gt;# yum-cronの状態確認
$ sudo systemctl is-active yum-cron
enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;操作-有効化-無効化&#34;&gt;操作（有効化・無効化）&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ sudo systemctl [UNITコマンド] [UNIT名]&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;UNITコマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;enable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動 : 有効化&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;disable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自動起動 : 無効化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>